#include "main.h"
#include "logging.hpp"
// using namespace std;
// using namespace pros;

Data test(Levels::both, "/usd/test.txt");

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {


}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {}

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {
	std::ofstream file;
	delay(300);
	char str_test [] =   "";
	char test_output [10240];
	for(int i = 0; i < 10240; i++){
		test_output[i]= str_test[i];
	}
	uint64_t time =0;
	uint64_t total_time = micros();
	uint64_t open_time = 0;
	uint64_t print_time =0;
	uint64_t close_time =0;
	for( int j = 0; j < 20; j++){
		open_time = 0;
		print_time =0;
		close_time =0;
		for(int i = 0; i <100; i++){
			time = micros();
			file.open("/usd/text.txt", ios::app);
			open_time += micros()-time;
			time = micros();
			file<<test_output;

			print_time += micros()-time;
			time = micros();
			file.close();
			close_time += micros()-time;
		}
		printf("%llu, %llu, %llu\n", open_time/100,print_time/100,close_time/100);
	}





	// // test.logging("fdsjsfdu");
}
